from random import randint
#Deck Builder starts here. I claim this code as my own. Use as you wish, but give credit. Do I just slap a copyright here and call it good? If so, Copyright Nate Arnall - 2019
numList = ['Ace', '2','3', '4', '5', '6', '7', '8', '9','10', 'Jack', 'Queen', 'King']
suitList = ['Spades', 'Clubs', 'Hearts', 'Diamonds']
deck = []
for s in range (len(suitList)):
  for n in range(len(numList)):
    deck.append(numList[n] + " of " + suitList[s])
#End Deck Builder

#Card Drawing
#draw must be greater than or equal to zero and less than or equal to 52 (numerical signs don't work, sorry)
draw = 5
hand = []
dealerHand=[]
deck1 = []
for s in range (len(suitList)):
  for n in range(len(numList)):
    deck1.append(numList[n] + " of " + suitList[s])

#For your hand   
for x in range(draw):
  delvar = randint(1, len(deck1)-1)
  hand.insert(0, deck1[delvar])
  del deck1[delvar]

#Dealer's hand
for x in range(draw):
  delvar = randint(1, len(deck1)-1)
  dealerHand.insert(0, deck1[delvar])
  del deck1[delvar]
print "Your hand:"
print hand
print 
print "Dealer's hand:"
print dealerHand

#Raw Card Value (Index of deck) Must be between 0 and 51, including 0 and 51. 0 is Ace of Spades, 51 is King of Diamonds
rawVal=0
print
print"Raw value:"
print deck[rawVal]

#Random Card from Suit
print
print "Random Card from each Suit:"
#Spades
fromSpades=(randint(0,12)%13)
print deck[fromSpades]
#Clubs
fromClubs=(randint(0,12)%13)+13
print deck[fromClubs]
#Hearts
fromHearts=(randint(0,12)%13)+26
print deck[fromHearts]
#Diamonds
fromDiamonds=(randint(0,12)%13)+39
print deck[fromDiamonds]



#Future Ideas
#Assign Raw Values to each card before adding it to your hand and being deleted from the deck, as to make games such as poker easier to create. For example, have a separate list containing each raw value (0-51), and pick the index of rawVal to add to the hand, essentailly getting rid of the card name system and making it only visual. You would still see Ace of Spades, but the program would see that you have card 0 in your hand. This would allow you to add rawVal%13 to determine if the cards are of the same number, so you can tell if there are pairs, three of a kind, and so on. It would still continue with rawVal so that you could use it for a full house, such that for len(hand): compare rawVal%13 for every other card in hand. rawVal%13 would yield 12 (King) twice, so you know that there are 2 Kings of different suits, and from there it can determine which suit is came from by 0<rawVal and rawVal<12 (and so on).
